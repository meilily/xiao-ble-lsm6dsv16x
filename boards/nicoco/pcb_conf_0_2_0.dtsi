/ {
	chosen {
        nordic,pm-ext-flash = &w25q128;
    };

	gpin {
		imu_int1: imu_int1 {
			label = "IMU interrupt 1 pin";
			gpios = <&xiao_d 1 GPIO_ACTIVE_HIGH>;
		};

		imu_int2: imu_int2 {
			label = "IMU interrupt 2 pin";
			gpios = <&xiao_d 0 GPIO_ACTIVE_HIGH>;
		};
	};

    aliases {
        spi-flash0 = &w25q128;
		imu = &lsm6dsv16x;
		imuint1 = &imu_int1;
		imuint2 = &imu_int2;
    };
};

&uicr {
    nfct-pins-as-gpios;
};

&i2c1 {
	compatible = "nordic,nrf-twi";
	/* Cannot be used together with spi1. */
	status = "okay";
	pinctrl-0 = <&i2c1_default>;
	pinctrl-1 = <&i2c1_sleep>;
	pinctrl-names = "default", "sleep";
	clock-frequency = <I2C_BITRATE_FAST>;
	lsm6dsv16x: lsm6dsv16x@6b {
		status = "okay";
		compatible = "zephyr,lsm6dsv16x";
		reg = <0x6b>;
	};
};

&qspi {
	status = "okay";
	pinctrl-0 = <&qspi_default>;
	pinctrl-1 = <&qspi_sleep>;
	pinctrl-names = "default", "sleep";
	w25q128: w25q128@0 {
		compatible = "nordic,qspi-nor";
		reg = <0>;
		sck-frequency = <16000000>; /* Use only 16MHz. The max frequency of 104MHz corrupts the data when reading/writing. */
		quad-enable-requirements = "S2B1v1";
		jedec-id = [ef 40 18];
		/*
		Refer to the Winbond application note for SFDP Definition table for the correct parameters.
		sfdp-bfp = [
			e5 20 f1 ff  ff ff ff 00  44 eb 08 6b  08 3b 80 bb
			ee ff ff ff  ff ff 00 ff  ff ff 00 ff  0c 20 0f 52
			10 d8 08 81
		];
		 */
		size = <0x8000000>;
		has-dpd;
		t-enter-dpd = <3000>;
		t-exit-dpd = <3000>;

		partitions {
			compatible = "fixed-partitions";
			#address-cells = <1>;
			#size-cells = <1>;

			data_partition: partition@0 {
				label = "data";
				reg = <0x00000000 0x01000000>;
			};
		};
	};
};

&pinctrl {
    uart0_default: uart0_default {
		group1 {
			psels = <NRF_PSEL(UART_TX, 0, 9)>;
		};
		group2 {
			psels = <NRF_PSEL(UART_RX, 0, 10)>;
			bias-pull-up;
		};
	};

	uart0_sleep: uart0_sleep {
		group1 {
			psels = <NRF_PSEL(UART_TX, 0, 9)>,
				<NRF_PSEL(UART_RX, 0, 10)>;
			low-power-enable;
		};
	};

    i2c1_default: i2c1_default {
		group1 {
			psels = <NRF_PSEL(TWIM_SDA, 0, 4)>,
				<NRF_PSEL(TWIM_SCL, 0, 5)>;
		};
	};

	i2c1_sleep: i2c1_sleep {
		group1 {
			psels = <NRF_PSEL(TWIM_SDA, 0, 4)>,
				<NRF_PSEL(TWIM_SCL, 0, 5)>;
			low-power-enable;
		};
	};

    qspi_default: qspi_default {
		group1 {
			psels = <NRF_PSEL(QSPI_SCK, 1, 13)>,
				<NRF_PSEL(QSPI_IO0, 0, 28)>,
				<NRF_PSEL(QSPI_IO1, 0, 29)>,
				<NRF_PSEL(QSPI_IO2, 1, 14)>,
				<NRF_PSEL(QSPI_IO3, 1, 12)>,
				<NRF_PSEL(QSPI_CSN, 1, 15)>;
		};
	};

	qspi_sleep: qspi_sleep {
		group1 {
			psels = <NRF_PSEL(QSPI_SCK, 1, 13)>,
				<NRF_PSEL(QSPI_IO0, 0, 28)>,
				<NRF_PSEL(QSPI_IO1, 0, 29)>,
				<NRF_PSEL(QSPI_IO2, 1, 14)>,
				<NRF_PSEL(QSPI_IO3, 1, 12)>;
			low-power-enable;
		};
		group2 {
			psels = <NRF_PSEL(QSPI_CSN, 1, 15)>;
			low-power-enable;
			bias-pull-up;
		};
	};
};
